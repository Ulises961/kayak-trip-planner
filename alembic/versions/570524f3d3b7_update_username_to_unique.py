"""Update Username to unique

Revision ID: 570524f3d3b7
Revises: a19441b232c7
Create Date: 2023-06-28 22:32:43.352019

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '570524f3d3b7'
down_revision = 'a19441b232c7'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_has_profile_picture')
    op.drop_table('sea')
    op.drop_table('point')
    op.drop_table('itinerary')
    op.drop_table('inventory_items')
    op.drop_table('item')
    op.drop_table('log')
    op.drop_table('image')
    op.drop_table('users')
    op.drop_table('point_has_image')
    op.drop_table('sea_state')
    op.drop_table('weather')
    op.drop_table('user_endorses_log')
    op.drop_table('day')
    op.drop_table('inventory')
    op.drop_table('user_has_trip')
    op.drop_table('trip')
    op.drop_table('weather_state')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('weather_state',
    sa.Column('day_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('time', postgresql.TIME(), autoincrement=False, nullable=False),
    sa.Column('temperature', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('precipitation', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('wind_direction', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('wind_force', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cloud', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['day_id'], ['weather.day_id'], name='weather_day_foreign_keys_in_weather_state'),
    sa.PrimaryKeyConstraint('day_id', 'time', name='weather_state_pkey')
    )
    op.create_table('trip',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('trip_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id', name='trip_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('user_has_trip',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('trip_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['trip_id'], ['trip.id'], name='user_has_trip_trip_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_has_trip_user_id_fkey')
    )
    op.create_table('inventory',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('inventory_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('trip_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['trip_id'], ['trip.id'], name='inventory_trip_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='inventory_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('day',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('day_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('day_number', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('itinerary_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['itinerary_id'], ['itinerary.id'], name='day_itinerary_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='day_pkey'),
    sa.UniqueConstraint('day_number', 'itinerary_id', 'date', name='day_day_number_itinerary_id_date_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('user_endorses_log',
    sa.Column('log_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('endorsers', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['endorsers'], ['users.id'], name='user_endorses_log_endorsers_fkey'),
    sa.ForeignKeyConstraint(['log_id'], ['log.id'], name='user_endorses_log_log_id_fkey'),
    sa.PrimaryKeyConstraint('log_id', name='user_endorses_log_pkey')
    )
    op.create_table('weather',
    sa.Column('day_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('model', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['day_id'], ['day.id'], name='day_foreign_key_in_weather'),
    sa.PrimaryKeyConstraint('day_id', name='weather_pkey')
    )
    op.create_table('sea_state',
    sa.Column('day_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('time', postgresql.TIME(), autoincrement=False, nullable=False),
    sa.Column('wave_height', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('wave_direction', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('swell_direction', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('swell_period', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['day_id'], ['sea.day_id'], name='sea_day_foreign_key_in_sea_state'),
    sa.PrimaryKeyConstraint('day_id', 'time', name='sea_state_pkey')
    )
    op.create_table('point_has_image',
    sa.Column('image_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('point_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['image_id'], ['image.id'], name='point_has_image_image_id_fkey'),
    sa.ForeignKeyConstraint(['point_id'], ['point.id'], name='point_has_image_point_id_fkey'),
    sa.PrimaryKeyConstraint('image_id', 'point_id', name='point_has_image_pkey')
    )
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('public_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('mail', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('pwd', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('phone', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('username', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('surname', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('admin', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('mail', name='users_mail_key'),
    sa.UniqueConstraint('phone', name='users_phone_key'),
    sa.UniqueConstraint('public_id', name='users_public_id_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('image',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('image_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('size', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('location', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='image_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('log',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('hours', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('avg_sea', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='log_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='log_pkey')
    )
    op.create_table('item',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('item_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('category', postgresql.ENUM('FIRST_AID', 'CAMPING', 'REPAIR', 'TRAVEL', 'GENERIC', name='itemcategorytype'), autoincrement=False, nullable=True),
    sa.Column('checked', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='item_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('inventory_items',
    sa.Column('inventory_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('item_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['inventory_id'], ['inventory.id'], name='inventory_items_inventory_id_fkey'),
    sa.ForeignKeyConstraint(['item_id'], ['item.id'], name='inventory_items_item_id_fkey')
    )
    op.create_table('itinerary',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('itinerary_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('is_public', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('total_miles', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('expected_total_miles', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('trip_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['trip_id'], ['trip.id'], name='itinerary_trip_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='itinerary_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('point',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('gps', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('type', postgresql.ENUM('STOP', 'POSITION', 'INTEREST', name='pointtype'), autoincrement=False, nullable=True),
    sa.Column('day_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('previous_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('next_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('reference_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['day_id'], ['day.id'], name='day_foreign_key_in_point'),
    sa.ForeignKeyConstraint(['next_id'], ['point.id'], name='point_next_id_fkey'),
    sa.ForeignKeyConstraint(['previous_id'], ['point.id'], name='point_previous_id_fkey'),
    sa.ForeignKeyConstraint(['reference_id'], ['point.id'], name='point_reference_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='point_pkey')
    )
    op.create_table('sea',
    sa.Column('day_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('moon_phase', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('high_tide', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('low_tide', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['day_id'], ['day.id'], name='day_foreign_key_in_sea'),
    sa.PrimaryKeyConstraint('day_id', name='sea_pkey')
    )
    op.create_table('user_has_profile_picture',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('image_id ', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['image_id '], ['image.id'], name='user_has_profile_picture_image_id _fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_has_profile_picture_user_id_fkey'),
    sa.PrimaryKeyConstraint('user_id', name='user_has_profile_picture_pkey')
    )
    # ### end Alembic commands ###
